/**
 * CalcLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _oAuthManager = require('../OAuthManager');

class SimpleCalculatorController {
    /**
     * Calculate
     *
     * @param {OperationEnum} operation The operator to apply on the variables
     * @param {double} x The LHS value
     * @param {double} y The RHS value
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCalculate(operation, x, y, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/{operation}'}`;

        // process template parameters
        _queryBuilder = _apiHelper.appendUrlWithTemplateParameters(_queryBuilder, {
            operation: (operation !== null) ? operation : null,
        });

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            x,
            y,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            a: _configuration.a,
        };

        const tokenSet = _oAuthManager.isTokenSet();
        if (!tokenSet) {
            const err = _oAuthManager.getInvalidClientError();
            _callback(err, null, null);
            return Promise.reject(err);
        }

        const oauthTokenPromise = _oAuthManager.checkTokenExpiry();
        oauthTokenPromise.then(() => {
            _headers.Authorization = `Bearer ${_configuration.oAuthToken.accessToken}`;
        });

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return oauthTokenPromise
        .then(() =>
            new Promise((_fulfill, _reject) => {
                _request(_options, (_error, _response, _context) => {
                    let errorResponse;
                    let response = '';
                    if (_context.response.body) {
                        response = JSON.parse(_context.response.body);
                    }
                    if (_error) {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                            errorResponse.response,
                            errorResponse.context);
                        _reject(errorResponse.error);
                    } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                        const _strResult = _response.body;
                        const _result = JSON.parse(_strResult);
                        _callback(null, _result, _context);
                        _fulfill(_result);
                    } else if (_response.statusCode === 412) {
                        const mappedObject = _baseController.getObjectMapper()
                            .mapObject(response, 'CouldNotComputeErrorException');
                        mappedObject.reason = 'Could not compute the requested calculation';
                        mappedObject.context = _context;
                        const _err = { errorMessage: 'Could not compute the requested calculation',
                            errorCode: 412,
                            errorResponse: mappedObject };
                        _callback(_err, null, _context);
                        _reject(_err);
                    } else {
                        errorResponse = _baseController.validateResponse(_context);
                        _callback(errorResponse.error,
                        errorResponse.response,
                        errorResponse.context);
                        _reject(errorResponse.error);
                    }
                });
            }))
        .catch((err) => {
            _callback(err, null, null);
        });
    }

}

module.exports = SimpleCalculatorController;
